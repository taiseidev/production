ルールの原則
○認証・認可
○スキーマ検証
○バリデーション
上記に分けて記述していく。

requestは新たにやってくるデータ。

allow writeは絶対に記述しない
→writeにはcreate update deleteすべてを含んでいる。

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
// サインインが完了しているかどうか
    function isAuthenticated() {
      return request.auth != null;
    }
// サインインが完了しているか？本人であるか（本人確認）
    function isUserAuthenticated(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }

// ユーザー作成時のスキーマ検証
    function isValidUser(user) {
      return user.size() == 3 // フィールドの数が3つ
      && 'createdAt' in user && user.createdAt is timestamp
      && 'email' in user && user.email is string
      && 'userId' in user && user.userId is string;
    }

    function isValidExpense(expense) {
      return expense.size() == 4
      && 'createdAt' in expense && expense.createdAt is timestamp
      && 'userId' in expense && expense.userId is string
      && 'content' in expense && expense.content is string
      && 'price' ind expense && expense.price is int;
    }

    match /users/{userId} {
      // ユーザー情報の取得ルール
      allow get: if isUserAuthenticated(userId);

      // ユーザー情報の作成ルール
      allow create: if isUserAuthenticated(userId) // 認証・認可
      && isValidUser(request.resource.data) // スキーマ検証
      // バリデーション部分
      && request.resource.data.createdAt == resource.data.createdAt
      && request.resource.data.userId == resource.data.userId;

      // ユーザー情報の更新ルール
      allow update: if isUserAuthenticated(userId)
      && isValidUser(request.resource.data)
      && request.resource.data.createdAt == resource.data.createdAt
      && request.resource.data.userId == resource.data.userId
    }

    match /expenses/{expensedId} {
      // 支出データの読み取りのルール
      allow read: if isUserAuthenticated(userId);

      // 支出データの作成のルール
      // 認証・認可
      allow create: if isUserAuthenticated(userId)
      // スキーマ検証
      && isValidExpense(request.resource.data)
      // データのバリデーション
      && request.resource.data.createdAt == request.time
      && request.resource.data.userId = userId
      && request.resource.data.content.size() > 0 // 0文字以上を許容する
      && request.resource.data.content.size() < 100 // 100文字以下までを許容する
      && request.resource.data.price > 0
      && request.resource.data.price < 1000000;

      // 支出データの更新のルール
            // 認証・認可
      allow create: if isUserAuthenticated(userId)
      // スキーマ検証
      && isValidExpense(request.resource.data)
      // データのバリデーション
      && request.resource.data.createdAt == resource.data.createdAt
      && request.resource.data.userId == resource.data.userId
      && request.resource.data.content.size() > 0 // 0文字以上を許容する
      && request.resource.data.content.size() < 100 // 100文字以下までを許容する
      && request.resource.data.price > 0
      && request.resource.data.price < 1000000;

      //　　支出データの削除のルール
      allow delete: if isUserAuthenticated(userId);

    }
  }
}